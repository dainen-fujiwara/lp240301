@charset "utf-8";


@keyframes backBoxAnime {
  99.9% {
    /*アニメーション終了ぎりぎりまで*/
    z-index: 2;

    /*最前面に*/
    border-width: 0px;

    /*開始はボーダーの太さは0*/
  }

  100% {
    z-index: -1;

    /*最背面に*/
    border-width: 0px;

    /*終了はボーダーの太さは0*/
  }
}

/*画面遷移の後現れるコンテンツ設定*/

/*bodyにappearクラスがついたら出現*/

body.appear #container {
  animation-name: PageAnimeAppear;
  animation-duration: 1s;
  animation-delay: 0.2s;
  animation-fill-mode: forwards;
  opacity: 0;
}

@keyframes PageAnimeAppear {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

/*==================================================
機能編 5-1-16　クリックしたら円形背景が拡大（上から）
===================================*/

/*アクティブになったエリア*/

#g-nav.panelactive {
  /*position:fixed;にし、z-indexの数値を大きくして前面へ*/
  position: fixed;
  z-index: 999;
  top: 0;
  width: 100%;
  height: 100vh;
}

/*丸の拡大*/

.circle-bg {
  position: fixed;
  z-index: 3;

  /*丸の形*/
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: #fccf00;

  /*丸のスタート位置と形状*/
  transform: scale(0);

  /*scaleをはじめは0に*/
  top: -50px;
  left: calc(50% - 50px);

  /*50%から円の半径を引いた値*/
  transition: all .6s;

  /*0.6秒かけてアニメーション*/

  &.circleactive {
    transform: scale(50);

    /*クラスが付与されたらscaleを拡大*/
  }
}

/*ナビゲーションの縦スクロール*/

#g-nav-list {
  display: none;

  /*はじめは表示なし*/
  /*ナビの数が増えた場合縦スクロール*/
  position: fixed;
  z-index: 999;
  width: 100%;
  height: 100vh;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

#g-nav {
  &.panelactive #g-nav-list {
    display: block;

    /*クラスが付与されたら出現*/
  }

  ul {
    opacity: 0;

    /*はじめは透過0*/
    /*ナビゲーション天地中央揃え※レイアウトによって調整してください。不必要なら削除*/
    position: absolute;
    z-index: 999;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  &.panelactive ul {
    opacity: 1;

    li {
      animation-name: gnaviAnime;
      animation-duration: 1s;
      animation-delay: .2s;

      /*0.2 秒遅らせて出現*/
      animation-fill-mode: forwards;
      opacity: 0;
    }
  }

  li {
    text-align: center;
    list-style: none;

    a {
      color: #333;
      text-decoration: none;
      padding: 10px;
      display: block;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      font-weight: bold;
    }
  }
}

/*ナビゲーション*/

/*背景が出現後にナビゲーションを表示*/

/* 背景が出現後にナビゲーション li を表示※レイアウトによって調整してください。不必要なら削除*/

@keyframes gnaviAnime {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

/*リストのレイアウト設定*/

/*==================================================
機能編　5-2-9 3本線がジャンプして×に
===================================*/
/*ボタン外側*/

.openbtn {
  position: fixed;
  top: 10px;
  right: 10px;
  z-index: 9999;

  /*ボタンを最前面に*/
  background: #2e98e5;
  cursor: pointer;
  width: 50px;
  height: 50px;
  border-radius: 5px;
  overflow: hidden;

  /*ジャンプしてはみ出た要素を消す*/

  .openbtn-area {
    transition: all .4s;

    /*アニメーションの設定*/
  }

  span {
    display: inline-block;
    transition: all .4s;

    /*アニメーションの設定*/
    position: absolute;
    left: 14px;
    height: 3px;
    border-radius: 2px;
    background: #fff;
    width: 45%;

    &:nth-of-type(1) {
      top: 15px;
    }

    &:nth-of-type(2) {
      top: 23px;
    }

    &:nth-of-type(3) {
      top: 31px;
    }
  }

  &.active {
    .openbtn-area {
      transform: rotateX(360deg);
    }

    span {
      &:nth-of-type(1) {
        top: 18px;
        left: 18px;
        transform: translateY(6px) rotate(-135deg);
        width: 30%;
      }

      &:nth-of-type(2) {
        opacity: 0;
      }

      &:nth-of-type(3) {
        top: 30px;
        left: 18px;
        transform: translateY(-6px) rotate(135deg);
        width: 30%;
      }
    }
  }
}

/*ボタン内側*/

/*activeクラスが付与されると .openbtn-areaが360度回転し、
その中の線のtopの位置や形状が変化して×に*/

/*==================================================
　機能編 7-1-44	矢印が右に移動して現在地に戻る
===================================*/

/* ボタン共通設定 */

.btn06 {
  /*矢印の基点とするためrelativeを指定*/
  position: relative;

  /*ボタンの形状*/
  text-decoration: none;
  display: inline-block;
  background: #fccf00;
  color: #333;
  padding: 10px;
  width: 230px;
  border-radius: 25px;
  text-align: center;
  outline: none;

  /*アニメーションの指定*/
  transition: ease .2s;
}

.btnarrow2 {
  &::after {
    content: '';

    /*絶対配置で矢印の位置を決める*/
    position: absolute;
    top: 1.2em;
    right: 25px;

    /*矢印の形状*/
    width: 10px;
    height: 10px;
    border-top: 2px solid #333;
    border-right: 2px solid #333;
    transform: rotate(45deg);
  }

  &:hover::after {
    animation: arrow .5s;
  }
}

/*hoverした際のアニメーション*/

@keyframes arrow {
  50% {
    right: 20px;
  }

  100% {
    right: 25px;
  }
}

/*==================================================
　機能編 7-1-16	右下に押し込まれる（立体が平面に）
===================================*/
/* ボタン共通設定 */

.btn03 {
  /*影の基点とするためrelativeを指定*/
  position: relative;

  /*ボタンの形状*/
  text-decoration: none;
  display: inline-block;
  text-align: center;
  background: transparent;
  border-radius: 25px;
  border: solid 1px #333;
  outline: none;

  /*アニメーションの指定*/
  transition: all 0.2s ease;

  &:hover {
    border-color: transparent;
  }

  span {
    position: relative;
    z-index: 2;

    /*z-indexの数値をあげて文字を背景よりも手前に表示*/
    /*テキストの形状*/
    display: block;
    padding: 10px 30px;
    background: #fccf00;
    border-radius: 25px;
    color: #333;

    /*アニメーションの指定*/
    transition: all 0.3s ease;
  }
}

/*hoverをした後のボタンの形状*/

/*ボタンの中のテキスト*/

/*影の設定*/

.pushright {
  &:before {
    content: "";

    /*絶対配置で影の位置を決める*/
    position: absolute;
    z-index: -1;
    top: 4px;
    left: 4px;

    /*影の形状*/
    width: 100%;
    height: 100%;
    border-radius: 25px;
    background-color: #333;
  }

  &:hover span {
    background-color: #333;
    color: #fff;
    transform: translate(4px, 4px);
  }
}

/*hoverの際にX・Y軸に4pxずらす*/

/*==================================================
機能編 8-1-8　リンクボタンをクリックしたら形状が変化
===================================*/

/*リンクを右下に固定*/

#page-top {
  position: fixed;
  right: 10px;
  bottom: 40px;
  z-index: 2;

  /*はじめは非表示*/
  opacity: 0;
  transform: translateY(150px);

  &.UpMove {
    animation: UpAnime 0.5s forwards;
  }

  &.DownMove {
    animation: DownAnime 0.5s forwards;
  }

  a {
    /*aタグの形状*/
    display: block;
    width: 80px;
    height: 80px;
    color: #333;
    text-align: center;
    text-transform: uppercase;
    text-decoration: none;
    font-size: 0.6rem;

    /*背景画像の指定*/
    background: url("../img/rocket_base.svg") no-repeat center;
    background-size: contain;
  }

  &.floatAnime a {
    width: 80px;
    height: 80px;

    /*背景画像の指定*/
    background: url("../img/rocket.svg") no-repeat center;
    background-size: contain;

    /*アニメーションの指定*/
    animation: floatAnime 2s linear infinite;
    opacity: 0;
  }

  span {
    position: absolute;
    bottom: -11px;
    right: 20px;
    color: #333;
    font-weight: bold;
    line-height: 1.3;
  }

  &.floatAnime span {
    bottom: -30px;
  }
}

/*　上に上がる動き　*/

@keyframes UpAnime {
  from {
    opacity: 0;
    transform: translateY(150px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/*　下に下がる動き　*/

@keyframes DownAnime {
  from {
    opacity: 1;
    transform: translateY(0);
  }

  to {
    opacity: 1;
    transform: translateY(150px);
  }
}

/*画像の切り替えと動き*/

@keyframes floatAnime {
  0% {
    transform: translateX(0);
    opacity: 0;
  }

  25% {
    transform: translateX(-6px);
    opacity: 1;
  }

  50% {
    transform: translateX(0);
  }

  100% {
    transform: translateX(6px);
    opacity: 1;
  }
}

/*Page Topと書かれたテキストの位置*/

/*==================================================
機能編 6-1-1　横移動させて全画面で見せる
===================================*/

/*　背景画像設定　*/

.slider-item01 {
  background: url(../img/main_01.png);
}

.slider-item02 {
  background: url(../img/main_02.png);
}

.slider-item03 {
  background: url(../img/main_03.png);
}

.slider-item {
  width: 100%;

  /*各スライダー全体の横幅を画面の高さいっぱい（100%）にする*/
  aspect-ratio: 920 / 612;

  /*各スライダー全体の縦幅を（80vh）にする*/
  background-repeat: no-repeat;

  /*背景画像をリピートしない*/
  background-position: center;

  /*背景画像の位置を中央に*/
  background-size: cover;

  /*背景画像が.slider-item全体を覆い表示*/
}

/*矢印の設定*/

/*戻る、次へ矢印の位置*/

.slick-prev, .slick-next {
  position: absolute;

  /*絶対配置にする*/
  z-index: 3;
  top: 42%;
  cursor: pointer;

  /*マウスカーソルを指マークに*/
  outline: none;

  /*クリックをしたら出てくる枠線を消す*/
  border-top: 2px solid #fff;

  /*矢印の色*/
  border-right: 2px solid #fff;

  /*矢印の色*/
  height: 25px;
  width: 25px;
}

.slick-prev {
  /*戻る矢印の位置と形状*/
  left: 2.5%;
  transform: rotate(-135deg);
}

.slick-next {
  /*次へ矢印の位置と形状*/
  right: 2.5%;
  transform: rotate(45deg);
}

/*ドットナビゲーションの設定*/

.slick-dots {
  position: relative;
  z-index: 3;
  text-align: center;
  margin: -50px 0 0 0;

  li {
    display: inline-block;
    margin: 0 5px;
  }

  button {
    color: transparent;
    outline: none;
    width: 8px;

    /*ドットボタンのサイズ*/
    height: 8px;

    /*ドットボタンのサイズ*/
    display: block;
    border-radius: 50%;
    background: #fff;

    /*ドットボタンの色*/
  }

  .slick-active button {
    background: #fccf00;

    /*ドットボタンの現在地表示の色*/
  }
}

/*==================================================
機能編 6-1-8　複数画像を流して見せる
===================================*/

/*slickのJSで書かれるタグ内、スライド左右の余白調整*/

.slider2 {
  img {
    width: 100%;

    /*スライダー内の画像を横幅100%に*/
    height: auto;
  }

  .slick-slide {
    margin: 0 10px;

    /*スライド左右の余白調整*/
  }
}

/*==================================================
印象編 4 最低限おぼえておきたい動き
===================================*/

/* 4-3 くるっ（Z 軸（右へ）） */

.rotateRightZ {
  animation-name: rotateRightZAnime;
  animation-duration: 1s;
  animation-fill-mode: forwards;
}

@keyframes rotateRightZAnime {
  from {
    transform: rotateZ(0);
  }

  to {
    transform: rotateZ(360deg);
  }
}

/* 4-1 ふわっ（その場で） */

.fadeIn {
  animation-name: fadeInAnime;
  animation-duration: 1s;
  animation-fill-mode: forwards;
  opacity: 0;
}

@keyframes fadeInAnime {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

/* 4-2 ふわっ（下から） */

.fadeUp {
  animation-name: fadeUpAnime;
  animation-duration: 0.5s;
  animation-fill-mode: forwards;
  opacity: 0;
}

@keyframes fadeUpAnime {
  from {
    opacity: 0;
    transform: translateY(100px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* 4-2 パタッ（左上へ） */

.flipLeftTop {
  animation-name: flipLeftTopAnime;
  animation-duration: 0.5s;
  animation-fill-mode: forwards;
  opacity: 0;
}

@keyframes flipLeftTopAnime {
  from {
    transform: translate(-20px, 80px) rotate(-15deg);
    opacity: 0;
  }

  to {
    transform: translate(0, 0) rotate(0deg);
    opacity: 1;
  }
}

/* 4-2 パタッ（右上へ） */

.flipRightTop {
  animation-name: flipRightTopAnime;
  animation-duration: 0.5s;
  animation-fill-mode: forwards;
  opacity: 0;
}

@keyframes flipRightTopAnime {
  from {
    transform: translate(-20px, 80px) rotate(25deg);
    opacity: 0;
  }

  to {
    transform: translate(0, 1) rotate(0deg);
    opacity: 1;
  }
}

/* 4-4 ボンッ（拡大） */

.zoomIn {
  animation-name: zoomInAnime;
  animation-duration: 0.5s;
  animation-fill-mode: forwards;
}

@keyframes zoomInAnime {
  from {
    transform: scale(0.6);
    opacity: 0;
  }

  to {
    transform: scale(1);
    opacity: 1;
  }
}

/* スクロールをしたら出現する要素にはじめに透過0を指定　*/

.fadeUpTrigger, .zoomInTrigger, .flipLeftTopTrigger, .flipRightTopTrigger {
  opacity: 0;
}
